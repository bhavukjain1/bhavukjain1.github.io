{"version":3,"file":"component---src-lekoarts-gatsby-theme-minimal-blog-core-templates-homepage-query-tsx-661dcfefe24cb0057567.js","mappings":"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","sources":["webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/blog-list-item.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/listing.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/homepage.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog-core/templates/homepage-query.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/homepage.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx"],"sourcesContent":["/** @jsx jsx */\nimport * as React from \"react\"\nimport { jsx, Box } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <Link to={post.slug} sx={(t) => ({ ...t.styles?.a, fontSize: [1, 2], color: `text` })}>\n      {post.title}\n    </Link>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: 1 }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport { HeadFC, Link } from \"gatsby\"\nimport Layout from \"@lekoarts/gatsby-theme-minimal-blog/src/components/layout\"\nimport Title from \"@lekoarts/gatsby-theme-minimal-blog/src/components/title\"\nimport Listing from \"@lekoarts/gatsby-theme-minimal-blog/src/components/listing\"\nimport List from \"@lekoarts/gatsby-theme-minimal-blog/src/components/list\"\nimport useMinimalBlogConfig from \"@lekoarts/gatsby-theme-minimal-blog/src/hooks/use-minimal-blog-config\"\nimport useSiteMetadata from \"@lekoarts/gatsby-theme-minimal-blog/src/hooks/use-site-metadata\"\nimport replaceSlashes from \"@lekoarts/gatsby-theme-minimal-blog/src/utils/replaceSlashes\"\nimport { visuallyHidden } from \"@lekoarts/gatsby-theme-minimal-blog/src/styles/utils\"\nimport Seo from \"@lekoarts/gatsby-theme-minimal-blog/src/components/seo\"\nimport Hero from \"@lekoarts/gatsby-theme-minimal-blog/src/texts/hero.mdx\"\nimport Bottom from \"@lekoarts/gatsby-theme-minimal-blog/src/texts/bottom.mdx\"\n\nexport type MBHomepageProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n}\n\nconst Homepage = ({ posts }: MBHomepageProps) => {\n  const { basePath, blogPath } = useMinimalBlogConfig()\n  const { siteTitle } = useSiteMetadata()\n\n  return (\n    <Layout>\n      <Listing posts={posts} showTags={false} />\n    </Layout>\n  )\n}\n\nexport default Homepage\n\nexport const Head: HeadFC = () => <Seo />\n","import { graphql } from \"gatsby\"\nimport HomepageComponent, { Head } from \"@lekoarts/gatsby-theme-minimal-blog-core/src/components/homepage\"\n\nexport default HomepageComponent\n\nexport { Head }\n\nexport const query = graphql`\n  query ($formatString: String!) {\n    allPost(sort: { date: DESC }) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport Homepage, { Head } from \"../../../components/homepage\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCoreHomepage({ ...props }: Props) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Homepage posts={allPost.nodes} {...props} />\n}\n\nexport { Head }\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n"],"names":["_ref","post","showTags","jsx","Box","mb","Link","to","slug","sx","t","_t$styles","styles","a","fontSize","color","title","mt","date","tags","React","ItemTags","posts","className","map","BlogListItem","key","basePath","blogPath","useMinimalBlogConfig","siteTitle","useSiteMetadata","Layout","Listing","Head","Seo","props","data","allPost","Homepage","Object","assign","nodes","description","pathname","image","children","canonicalUrl","site","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","name","content","property","rel","type","sizes","href","withPrefix","tagsPath","tag","i","replaceSlashes"],"sourceRoot":""}