{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-blog-query-tsx-ea744693f6e8e192fe29.js","mappings":"gNAaA,MATuBA,MACrBC,EAAAA,EAAAA,YAAU,KAERC,OAAOC,SAASC,QAAQ,IAAI,GAC3B,IAEIC,EAAAA,cAAA,aAIF,MAAMC,EAAeA,IAAMD,EAAAA,cAACE,EAAAA,EAAG,CAACC,MAAM,SCX7C,MCQe,SAA4BC,GAAuB,OAAjBC,GAAcD,EAC7D,MACEE,MAAM,QAAEC,IACNF,EAEJ,OAAOL,EAAAA,cAACL,EAAIa,OAAAC,OAAA,CAACC,MAAOH,EAAQI,OAAWN,GACzC,C,yDCmDA,IAvDYD,IAOK,IAPJ,MACXD,EAAQ,GAAE,YACVS,EAAc,GAAE,SAChBC,EAAW,GAAE,MACbC,EAAQ,GAAE,SACVC,EAAW,KAAI,aACfC,EAAe,IACNZ,EACT,MAAMa,GAAOC,EAAAA,EAAAA,MAEP,UACJC,EACAC,aAAcC,EAAY,QAC1BC,EACAC,gBAAiBC,EACjBC,UAAWC,EAAY,OACvBC,EAAM,aACNC,GACEX,EAEEY,EAAM,CACV1B,MAAOA,EAAQ,GAAGA,OAAWgB,IAAcE,EAC3CT,YAAaA,GAAeY,EAC5BM,IAAK,GAAGR,IAAUT,GAAY,KAC9BC,MAAO,GAAGQ,IAAUR,GAASY,KAE/B,OACE1B,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,QAAM+B,KAAMH,IACZ5B,EAAAA,cAAA,aAAQ6B,EAAI1B,OACZH,EAAAA,cAAA,QAAMgC,KAAK,cAAcC,QAASJ,EAAIjB,cACtCZ,EAAAA,cAAA,QAAMgC,KAAK,QAAQC,QAASJ,EAAIf,QAChCd,EAAAA,cAAA,QAAMkC,SAAS,WAAWD,QAASJ,EAAI1B,QACvCH,EAAAA,cAAA,QAAMkC,SAAS,SAASD,QAASJ,EAAIC,MACrC9B,EAAAA,cAAA,QAAMkC,SAAS,iBAAiBD,QAASJ,EAAIjB,cAC7CZ,EAAAA,cAAA,QAAMkC,SAAS,WAAWD,QAASJ,EAAIf,QACvCd,EAAAA,cAAA,QAAMkC,SAAS,UAAUD,QAAQ,YACjCjC,EAAAA,cAAA,QAAMkC,SAAS,eAAeD,QAASJ,EAAIjB,cAC3CZ,EAAAA,cAAA,QAAMgC,KAAK,eAAeC,QAAQ,wBAClCjC,EAAAA,cAAA,QAAMgC,KAAK,gBAAgBC,QAASJ,EAAI1B,QACxCH,EAAAA,cAAA,QAAMgC,KAAK,cAAcC,QAASJ,EAAIC,MACtC9B,EAAAA,cAAA,QAAMgC,KAAK,sBAAsBC,QAASJ,EAAIjB,cAC9CZ,EAAAA,cAAA,QAAMgC,KAAK,gBAAgBC,QAASJ,EAAIf,QACxCd,EAAAA,cAAA,QAAMgC,KAAK,oBAAoBC,QAASJ,EAAIjB,cAC5CZ,EAAAA,cAAA,QAAMgC,KAAK,kBAAkBC,QAASN,IACtC3B,EAAAA,cAAA,QAAMgC,KAAK,eAAeC,QAAQ,wCAClCjC,EAAAA,cAAA,QAAMmC,IAAI,OAAOC,KAAK,YAAYC,MAAM,QAAQC,MAAMC,EAAAA,EAAAA,YAAW,wBACjEvC,EAAAA,cAAA,QAAMmC,IAAI,OAAOC,KAAK,YAAYC,MAAM,QAAQC,MAAMC,EAAAA,EAAAA,YAAW,wBACjEvC,EAAAA,cAAA,QAAMmC,IAAI,mBAAmBE,MAAM,UAAUC,MAAMC,EAAAA,EAAAA,YAAW,2BAC7DvB,EAAehB,EAAAA,cAAA,QAAMmC,IAAI,YAAYG,KAAMtB,IAAmB,KAC9DD,EACA,C,qCCzBP,IArBwBG,KACTsB,EAAAA,EAAAA,gBAAc,cAiBfvB,KAAKwB,Y","sources":["webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/blog.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/blog-query.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/blog.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/hooks/use-site-metadata.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { HeadFC } from 'gatsby';\nimport Seo from '@lekoarts/gatsby-theme-minimal-blog/src/components/seo';\n\nconst Blog: React.FC = () => {\n  useEffect(() => {\n    // Redirect to home after component mounts\n    window.location.replace('/'); // Or window.location.href = '/'\n  }, []);\n\n  return <div>{/* Your component JSX */}</div>;\n};\n\nexport default Blog;\nexport const Head: HeadFC = () => <Seo title=\"Blog\" />","import { graphql } from \"gatsby\"\nimport BlogComponent, { Head } from \"../components/blog\"\n\nexport default BlogComponent\n\nexport { Head }\n\nexport const query = graphql`\n  query ($formatString: String!) {\n    allPost(sort: { date: DESC }) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport Blog, { Head } from \"../../../components/blog\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCoreBlog({ ...props }: Props) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Blog posts={allPost.nodes} {...props} />\n}\n\nexport { Head }\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import { graphql, useStaticQuery } from \"gatsby\"\n\ntype UseSiteMetadataProps = {\n  site: {\n    siteMetadata: {\n      siteTitle: string\n      siteTitleAlt: string\n      siteHeadline: string\n      siteUrl: string\n      siteDescription: string\n      siteImage: string\n      siteLanguage: string\n      author: string\n      [key: string]: unknown\n    }\n  }\n}\n\nconst useSiteMetadata = () => {\n  const data = useStaticQuery<UseSiteMetadataProps>(graphql`\n    query {\n      site {\n        siteMetadata {\n          siteTitle\n          siteTitleAlt\n          siteHeadline\n          siteUrl\n          siteDescription\n          siteImage\n          siteLanguage\n          author\n        }\n      }\n    }\n  `)\n\n  return data.site.siteMetadata\n}\n\nexport default useSiteMetadata\n"],"names":["Blog","useEffect","window","location","replace","React","Head","Seo","title","_ref","props","data","allPost","Object","assign","posts","nodes","description","pathname","image","children","canonicalUrl","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","name","content","property","rel","type","sizes","href","withPrefix","useStaticQuery","siteMetadata"],"sourceRoot":""}